<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">John Vilk</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="https://jvilk.com/feed.xml" />
<link rel="alternate" type="text/html" href="https://jvilk.com" />
<updated>2015-01-01T18:00:46-05:00</updated>
<id>https://jvilk.com/</id>
<author>
  <name>John Vilk</name>
  <uri>https://jvilk.com/</uri>
  <email>jvilk@cs.umass.edu</email>
</author>


  

<entry>
  <title type="html"><![CDATA[Java 8 Specification Bug: Default Interface Method Resolution]]></title>
  <link rel="alternate" type="text/html" href="https://jvilk.com/blog/java-8-specification-bug/" />
  <id>https://jvilk.com/blog/java-8-specification-bug</id>
  <published>2015-01-01T14:39:05-05:00</published>
  <updated>2015-01-01T14:39:05-05:00</updated>
  <author>
    <name>John Vilk</name>
    <uri>https://jvilk.com</uri>
    <email>jvilk@cs.umass.edu</email>
  </author>
  <content type="html">&lt;p&gt;In a previous blog post, I pointed out some &lt;a href=&quot;https://jvilk.com/blog/java-8-wtf-ambiguous-method-lookup/&quot;&gt;rather surprising behavior&lt;/a&gt; involving default interface methods, and cases in which method resolution is ambiguous as specified by the JVM specification. However, after consulting with commenters on the corresponding &lt;a href=&quot;http://www.reddit.com/r/programming/comments/2qula0/java_8_wtf_ambiguous_method_lookup/cn9th0y&quot;&gt;reddit&lt;/a&gt; post, it is possible that that method resolution is never ambiguous, and the JVM specification is &lt;em&gt;incorrect&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I’ve written an email to the &lt;a href=&quot;http://mail.openjdk.java.net/mailman/listinfo/jls-jvms-spec-comments&quot;&gt;JLS/JVM Specification Comments mailing list&lt;/a&gt;, which is a drop box for these sort of issues. I have no idea if they will get back to me or even discuss the issue, but I will post the full email here, with an addendum that describes how you can replicate the issue described in the email.&lt;/p&gt;

&lt;h2 id=&quot;email-to-the-jlsjvm-committee&quot;&gt;Email to the JLS/JVM Committee&lt;/h2&gt;

&lt;p&gt;Hello,&lt;/p&gt;

&lt;p&gt;I recently noticed a disagreement between the JLS and the JVMS for SE8 concerning the scenario where multiple direct superinterfaces of a class provide a default method for a method reference with the same name and signature. I believe this is a bug in the JVM specification, which specifies behavior that is not present in the reference implementation of the specification, and which differs from the behavior specified in the JLS.&lt;/p&gt;

&lt;p&gt;The JVM specification states the following should occur in the section on method resolution, &lt;a href=&quot;http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html#jvms-5.4.3.3&quot;&gt;§5.4.3.3&lt;/a&gt;, should there be no single maximally-specific default method (meaning, there are multiple) (emphasis mine):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Otherwise, if any superinterface of &lt;code&gt;C &lt;/code&gt;declares a method with the name and descriptor specified by the method reference that has neither its &lt;code&gt;ACC_PRIVATE&lt;/code&gt; flag nor its &lt;code&gt;ACC_STATIC&lt;/code&gt; flag set, &lt;strong&gt;one of these is arbitrarily chosen and method lookup succeeds&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, the JLS specification states the following in the section on Interface Method Declarations in the binary compatibility chapter, &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.5.6&quot;&gt;§13.5.6&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Adding a default method, or changing a method from abstract to default, does not break compatibility with pre-existing binaries, but may &lt;strong&gt;cause an &lt;code&gt;IncompatibleClassChangeError&lt;/code&gt; if a pre-existing binary attempts to invoke the method&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This section of the JLS contains a full example that exemplifies the specification bug I am describing in this email. In particular, the JLS states:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If &lt;code&gt;Cowboy&lt;/code&gt; is recompiled but not &lt;code&gt;CowboyArtist&lt;/code&gt;, then running the new binary with the existing binary for &lt;code&gt;CowboyArtist&lt;/code&gt; will link without error &lt;strong&gt;but cause an &lt;code&gt;IncompatibleClassChangeError&lt;/code&gt; when main attempts to invoke &lt;code&gt;draw()&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, this behavior description is in contrast to the JVM specification, which claims that one of the draw methods should be arbitrarily chosen and invoked.&lt;/p&gt;

&lt;p&gt;Using separate compilation on the example, I verified that the JVM does, in fact, throw an &lt;code&gt;IncompatibleClassChangeError&lt;/code&gt;, which disagrees with the behavior specified in the JVMS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ java example/CowboyArtist
Exception in thread &quot;main&quot; java.lang.IncompatibleClassChangeError: Conflicting default methods: example/Cowboy.draw example/Painter.draw
at example.CowboyArtist.draw(CowboyArtist.java)
at example.CowboyArtist.main(CowboyArtist.java:6)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since this behavior originates in the JVM, rather than in the bytecode produced from the Java Compiler, it should be included in the JVM specification.&lt;/p&gt;

&lt;p&gt;Thus, to fix this specification bug, I propose that the quoted section of the JVMS from the method resolution section be replaced with the following text:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Otherwise, if there are multiple maximally-specific superinterface methods of &lt;code&gt;C&lt;/code&gt; for the name and descriptor specified by the method reference, method resolution throws an &lt;code&gt;IncompatibleClassChangeError&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I believe the above text captures the behavior of the current reference implementation, and is in line with the JLS.&lt;/p&gt;

&lt;p&gt;Let me know if you have any questions, comments, or if you find a mistake in my reasoning above. It is very possible that I am missing a subtlety.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;John&lt;/p&gt;

&lt;h2 id=&quot;replicating-the-behavior&quot;&gt;Replicating the Behavior&lt;/h2&gt;

&lt;p&gt;If you want to try this at home, you’ll need to install the &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;Java 8 JDK&lt;/a&gt;. To provoke the behavior, we’ll need to use &lt;em&gt;separate compilation&lt;/em&gt;, since the Java Compiler will not compile code if it can prove at compile time that a class implements two interfaces that provide a default method with the same name and signature.&lt;/p&gt;

&lt;p&gt;In Java, &lt;em&gt;separate compilation&lt;/em&gt; means that multiple components of an application are compiled independently, and thus it is possible that the application will run with a version of a component that it was not compiled against. Normally, Java programs are run against the same code that they are compiled against. For example, if you compile your program against JUnit 4.10, you will most likely run your program against JUnit 4.10. However, it is possible to run the code against alternative versions of JUnit, such as JUnit 4.11, without issue.&lt;/p&gt;

&lt;p&gt;In any case, interesting problems can occur when your code is run against versions of classes that they were not compiled with. We abuse this flexibility to force a scenario where a class implements two interfaces that provide the same default method.&lt;/p&gt;

&lt;p&gt;First, create the following files:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// In example/Cowboy.java:&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cowboy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// In example/Painter.java:&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Painter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Here&amp;#39;s a picture...&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// In example/CowboyArtist.java:&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;example.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CowboyArtist&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cowboy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Painter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CowboyArtist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, compile a first version of the program, and verify that it runs properly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ javac example/CowboyArtist.java
$ java example.CowboyArtist
Here&#39;s a picture...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, modify &lt;code&gt;example/Cowboy.java&lt;/code&gt; so that it implements &lt;code&gt;draw&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cowboy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Bang!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Recompile &lt;code&gt;Cowboy&lt;/code&gt; alone, and try to run the program. Notice that it throws an &lt;code&gt;IncompatibleClassChangeError&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ javac example/Cowboy.java
$ java example.CowboyArtist
Exception in thread &quot;main&quot; java.lang.IncompatibleClassChangeError: Conflicting default methods: example/Cowboy.draw example/Painter.draw
at example.CowboyArtist.draw(CowboyArtist.java)
at example.CowboyArtist.main(CowboyArtist.java:6)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The crux of the issue that I describe in my email is that the JVM specification states that the JVM should arbitrarily choose to invoke either &lt;code&gt;example/Cowboy.draw&lt;/code&gt; or &lt;code&gt;example/Painter.draw&lt;/code&gt;, yet the Java Language Specification (JLS) states that the JVM should throw an &lt;code&gt;IncompatibleClassChangeError&lt;/code&gt;. HotSpot, the JVM in OpenJDK, is the reference implementation of the specification. Since HotSpot inplements the behavior in the JLS, it appears that the JVM specification is incorrect and should be updated to reflect the behavior in HotSpot.&lt;/p&gt;

&lt;h2 id=&quot;life-lessons-learned&quot;&gt;Life Lessons Learned&lt;/h2&gt;

&lt;p&gt;What I’ve learned from all of this is that blogging about all of the odd JVM corner cases I have to explore in creating &lt;a href=&quot;https://github.com/plasma-umass/doppio&quot;&gt;DoppioJVM&lt;/a&gt; can bring to light some of the complications of adding features to a well-entrenched language like Java as commenters step forward and share their expertise. I hope you all continue to correct me as I stumble through understanding the JVM specification, and wonder how certain sections came to be.&lt;/p&gt;

&lt;p&gt;With that said, I’m off to read more about &lt;code&gt;invokedynamic&lt;/code&gt;, which I’m currently fighting to get right in &lt;a href=&quot;https://github.com/plasma-umass/doppio&quot;&gt;DoppioJVM&lt;/a&gt;. :)&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://jvilk.com/blog/java-8-specification-bug/&quot;&gt;Java 8 Specification Bug: Default Interface Method Resolution&lt;/a&gt; was originally published by John Vilk at &lt;a href=&quot;https://jvilk.com&quot;&gt;John Vilk&lt;/a&gt; on January 01, 2015.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Java 8 WTF: Ambiguous Method Lookup]]></title>
  <link rel="alternate" type="text/html" href="https://jvilk.com/blog/java-8-wtf-ambiguous-method-lookup/" />
  <id>https://jvilk.com/blog/java-8-wtf-ambiguous-method-lookup</id>
  <published>2014-12-30T15:39:07-05:00</published>
  <updated>2014-12-30T15:39:07-05:00</updated>
  <author>
    <name>John Vilk</name>
    <uri>https://jvilk.com</uri>
    <email>jvilk@cs.umass.edu</email>
  </author>
  <content type="html">&lt;p&gt;I am currently working on adding Java 7/8 support to &lt;a href=&quot;https://github.com/plasma-umass/doppio&quot;&gt;DoppioJVM&lt;/a&gt;. In doing so, I am discovering some of the rather surprising JVM changes required to support Java 7+, and some interesting spec corner cases. In this blog post, I’ll reveal some &lt;em&gt;very surprising&lt;/em&gt; behavior involving a new Java 8 feature: Default interface methods!&lt;/p&gt;

&lt;h2 id=&quot;introduction-to-default-interface-methods&quot;&gt;Introduction to Default Interface Methods&lt;/h2&gt;

&lt;p&gt;Default interface methods let you include full method implementations in your interface definitions.
Classes that implement the interface do not need to explicitly implement these methods; they inherit the default implementation should the class not override it.
I believe that this is a positive change for Java.&lt;/p&gt;

&lt;p&gt;For example, the following is now valid Java code; it prints &lt;code&gt;Bark!&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;makeNoise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Prints &amp;quot;Bark!&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNoise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeNoise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getNoise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNoise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Bark!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using this functionality, Java 8 added a number of new methods to core Java interfaces &lt;em&gt;without&lt;/em&gt; breaking existing code by providing default implementations, such as &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/List.html#replaceAll-java.util.function.UnaryOperator-&quot;&gt;&lt;code&gt;java.util.List.replaceAll&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In addition to this functionality, interfaces can now contain static methods, but this change is irrelevant to this blog post.&lt;/p&gt;

&lt;h2 id=&quot;jvm-changes-required&quot;&gt;JVM Changes Required&lt;/h2&gt;

&lt;p&gt;You may be surprised to hear that the above functionality requires changes at the Java Virtual Machine (JVM) level.
Previously, &lt;em&gt;all&lt;/em&gt; methods invoked on an object could only be defined in the object’s class or super classes.
Thus, method lookup for &lt;code&gt;invokevirtual&lt;/code&gt; and &lt;code&gt;invokeinterface&lt;/code&gt; instructions proceeds as follows in Java &amp;lt;8:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Check the class of the object for a method with the given name and signature. If present, use that method.&lt;/li&gt;
  &lt;li&gt;Else, recursively check the class’s super types for a method with the given name and signature.&lt;/li&gt;
  &lt;li&gt;If no suitable method is found, throw a &lt;code&gt;NoSuchMethodError&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With default interface methods, the JVM now needs to search interfaces for method implementations.
Naturally, methods present in the object’s class or super classes are prioritized over the default implementation in an interface.
Thus, method lookup for &lt;code&gt;invokevirtual&lt;/code&gt; and &lt;code&gt;invokeinterface&lt;/code&gt; instructions in Java 8+ now works as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Check the class of the object for a method with the given name and signature. If present, use that method.&lt;/li&gt;
  &lt;li&gt;Else, recursively check the class’s super types for a method with the given name and signature.&lt;/li&gt;
  &lt;li&gt;Check the superinterfaces of the object for a method with the given name and signature.&lt;/li&gt;
  &lt;li&gt;If no suitable method is found, throw a &lt;code&gt;NoSuchMethodError&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This change appears to be relatively straightforward, but it introduces a subtle issue…&lt;/p&gt;

&lt;h2 id=&quot;multiple-inheritance-troubles&quot;&gt;Multiple Inheritance Troubles&lt;/h2&gt;

&lt;p&gt;The new lookup scheme introduces ambiguity when multiple interfaces provide default implementations of a method with the &lt;em&gt;same name and signature&lt;/em&gt;.
Should the class and its super classes fail to provide an implementation for the desired method, how should the JVM prioritize one interface’s default implementation over another?&lt;/p&gt;

&lt;p&gt;The Java compiler writers knew this would be an issue, and applied a band-aid to prevent certain programs from compiling:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JavaCHatesMe&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IFace1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IFace2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IFace1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IFace2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you try to compile the above program, &lt;code&gt;javac&lt;/code&gt; prints out the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ javac JavaCHatesMe.java
JavaCHatesMe.java:1: error: class JavaCHatesMe inherits unrelated defaults for foo() from types IFace1 and IFace2
public class JavaCHatesMe implements IFace1, IFace2 {
  ^
  1 error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(It should be noted that without default methods, and with a concrete implementation of &lt;code&gt;foo&lt;/code&gt; in &lt;code&gt;JavaCHatesMe&lt;/code&gt;, the program compiles with no issue.)&lt;/p&gt;

&lt;p&gt;However, this band-aid does not resolve the root problem! The following program compiles &lt;em&gt;just fine&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WTF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ISpeak&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ISpeak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ISpeak Speaking!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EmptySpeakImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EmptySpeakImplChild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ISpeak2&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISpeak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ISpeak2 Speaking!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmptySpeakImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISpeak2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmptySpeakImplChild&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmptySpeakImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISpeak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this example, &lt;code&gt;EmptySpeakImpl&lt;/code&gt; implements the interface &lt;code&gt;ISpeak2&lt;/code&gt;, and thus it clearly inherits &lt;code&gt;ISpeak2.speak()&lt;/code&gt;.
However, &lt;code&gt;EmptySpeakImplChild&lt;/code&gt; directly implements &lt;code&gt;ISpeak&lt;/code&gt; and implements &lt;code&gt;ISpeak2&lt;/code&gt; through its parent class, and thus its &lt;code&gt;speak()&lt;/code&gt; method will be from either of those two interfaces.&lt;/p&gt;

&lt;p&gt;Which &lt;code&gt;speak&lt;/code&gt; implementation do you think &lt;code&gt;EmptySpeakImplChild&lt;/code&gt; should inherit: &lt;code&gt;ISpeak.speak&lt;/code&gt;, or &lt;code&gt;ISpeak2.speak&lt;/code&gt;?
Common Java sense might indicate that the JVM should prioritize default interface methods specified in interfaces &lt;em&gt;directly implemented&lt;/em&gt; by child classes over those inherited from interfaces implemented by parent classes.
According to this scheme, &lt;code&gt;EmptySpeakImplChild&lt;/code&gt; should inherit &lt;code&gt;ISpeak.speak&lt;/code&gt;, as it explicitly implements that interface.&lt;/p&gt;

&lt;p&gt;However, Oracle’s JVM, HotSpot, disagrees with this logic, as the above program prints out the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ java WTF
ISpeak2 Speaking!
ISpeak2 Speaking!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;h2 id=&quot;taking-a-look-at-the-jvm-specification&quot;&gt;Taking a Look at the JVM Specification&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;EDIT: My interpretation below is incorrect, but I will leave it here for posterity. Please see the next section for an updated interpretation.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A quick glance at the JVM specification reveals why this behavior occurs: &lt;em&gt;method lookup in Java 8 is officially ambiguous&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html#jvms-5.4.3.3&quot;&gt;JVM Spec §5.4.3.3&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Otherwise, if any superinterface of C declares a method with the name and descriptor specified by the method reference that has neither its ACC_PRIVATE flag nor its ACC_STATIC flag set, &lt;strong&gt;one of these is arbitrarily chosen and method lookup succeeds&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By this definition of method resolution, both the proposed “common sense” behavior discussed above and HotSpot’s behavior are valid by the spec.
In fact, one could simply invoke &lt;code&gt;Math.random()&lt;/code&gt; in the process to decide among multiple choices.&lt;/p&gt;

&lt;p&gt;While I expect Java developers to rarely encounter this corner case, it is rather disturbing to encounter a specification that explicitly introduces ambiguity into a core process. Since Java 8 is the &lt;em&gt;first&lt;/em&gt; version of Java to include this behavior, this was an explicit decision on the part of the JVM standards committee rather than an after-the-fact discovery.&lt;/p&gt;

&lt;p&gt;It would have been preferable to specify &lt;em&gt;some&lt;/em&gt; order of preference, such as lexicographic ordering by name, order that interfaces are declared in the &lt;code&gt;class&lt;/code&gt; file, etc. Even if the specified order of preference doesn’t make sense to developers, it would allow alternative JVM implementations to have consistent behavior. I expect that programs that include this problematic behavior are doing so by accident, rather than conscious developer choice, and I would prefer that their program is portable across spec-compliant independent JVMs!&lt;/p&gt;

&lt;h2 id=&quot;edit-alternative-jvm-specification-interpretation&quot;&gt;Edit: Alternative JVM Specification Interpretation&lt;/h2&gt;

&lt;p&gt;User pron98 on reddit pointed out &lt;a href=&quot;http://www.reddit.com/r/programming/comments/2qula0/java_8_wtf_ambiguous_method_lookup/cn9th0y&quot;&gt;that my interpretation of the JVM specification&lt;/a&gt; may be incorrect, and that my example is not triggering the ambiguous behavior quoted above. In pron98’s interpretation, the term &lt;em&gt;superinterfaces&lt;/em&gt; in the specification refers solely to &lt;em&gt;direct superinterfaces&lt;/em&gt; – that is, interfaces directly implemented by a class C – rather than &lt;em&gt;indirect superinterfaces&lt;/em&gt;, which includes those that are inherited from C’s parent classes.
Under this interpretation, default method bodies inherited from interfaces implemented on parent classes will &lt;em&gt;always&lt;/em&gt; override default method bodies inherited from interfaces implemented on child classes.&lt;/p&gt;

&lt;p&gt;pron98 links to a &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.8&quot;&gt;section in the Java Language Specification&lt;/a&gt; which supports this interpretation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that it is possible for an inherited concrete method to prevent the inheritance of an abstract or default method. (Later we will assert that the concrete method overrides the abstract or default method “from C”.) Also, it is possible for one supertype method to prevent the inheritance of another supertype method if the former “already” overrides the latter - this is the same as the rule for interfaces (§9.4.1), and prevents conflicts in which multiple default methods are inherited and one implementation is clearly meant to supersede the other.]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At first, this behavior seemed counterintuitive to me, as it appears to invert the inheritance hierarchy (e.g. methods in parent classes taking precedence over methods in child classes). However, &lt;em&gt;default&lt;/em&gt; methods are used only when no other implementations exist, so if an implementation exists from a parent class, it makes some sense that the child class’s default method will not be used when an implementation is first found in a parent class.&lt;/p&gt;

&lt;p&gt;With all this said, method lookup &lt;strong&gt;is still ambiguous&lt;/strong&gt; in the case that a class implements two interfaces with default method bodies for the same method. &lt;code&gt;javac&lt;/code&gt; blocks all such programs from compiling, so Java programs are immune to the ambiguity, but non-Java languages that run on the JVM may still encounter the ambiguity.&lt;/p&gt;

&lt;h2 id=&quot;edit-2-a-little-more-complication&quot;&gt;Edit 2: A little more complication…&lt;/h2&gt;

&lt;p&gt;I missed one more subtlety in the specification. Buried in the method resolution section is the term &lt;em&gt;maximally-specific superinterface methods&lt;/em&gt; of &lt;code&gt;C&lt;/code&gt;. When no implementation for an interface method exists, and the JVM goes searching for a default implementation, the definition of this term defines a priority on &lt;em&gt;certain&lt;/em&gt; default interface methods.&lt;/p&gt;

&lt;p&gt;This term is applicable to my example application with &lt;code&gt;ISpeak&lt;/code&gt;. In particular, the default interface methods on subinterfaces are always prioritized over the default interface methods on their parents. Thus, since &lt;code&gt;EmptySpeakImplChild&lt;/code&gt;’s parent implements &lt;code&gt;ISpeak2&lt;/code&gt;, which is a subinterface of &lt;code&gt;ISpeak&lt;/code&gt;, its default methods will &lt;em&gt;always&lt;/em&gt; trump &lt;code&gt;ISpeak&lt;/code&gt;’s default methods. As a result, my example is even less ambiguous than I thought it was!&lt;/p&gt;

&lt;h2 id=&quot;next-post-invokedynamic&quot;&gt;Next Post: &lt;code&gt;invokedynamic&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;In my next post, I will dive into the murky world of &lt;code&gt;invokedynamic&lt;/code&gt;: the specification, the implementation in OpenJDK, and the resulting consequences for JVM implementors.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://jvilk.com/blog/java-8-wtf-ambiguous-method-lookup/&quot;&gt;Java 8 WTF: Ambiguous Method Lookup&lt;/a&gt; was originally published by John Vilk at &lt;a href=&quot;https://jvilk.com&quot;&gt;John Vilk&lt;/a&gt; on December 30, 2014.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[New Website Launch]]></title>
  <link rel="alternate" type="text/html" href="https://jvilk.com/blog/new-website-launch/" />
  <id>https://jvilk.com/blog/new-website-launch</id>
  <published>2014-12-12T19:18:45-05:00</published>
  <updated>2014-12-12T19:18:45-05:00</updated>
  <author>
    <name>John Vilk</name>
    <uri>https://jvilk.com</uri>
    <email>jvilk@cs.umass.edu</email>
  </author>
  <content type="html">&lt;p&gt;For the longest time, my personal website was a simple one-page setup. Handcrafted in HTML, frustrating to update, and oft-neglected… I had to make a change.&lt;/p&gt;

&lt;h2 id=&quot;enter-jekyll&quot;&gt;Enter Jekyll&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; is a fantastic &lt;a href=&quot;http://en.wikipedia.org/wiki/Markdown&quot;&gt;Markdown&lt;/a&gt;-driven static site generator. Once you have a template set up, you can simply write all of your content in Markdown and completely forget about the terrible world of CSS styling and positioning.&lt;/p&gt;

&lt;p&gt;I started with the excellent &lt;a href=&quot;http://mademistakes.com/so-simple/&quot;&gt;So Simple Theme&lt;/a&gt; by &lt;a href=&quot;https://mademistakes.com/about/&quot;&gt;Michael Rose&lt;/a&gt;, and tweaked it for my needs. The end result is a clean mobile-ready site that I can easily update.&lt;/p&gt;

&lt;h2 id=&quot;starting-a-blog&quot;&gt;Starting a blog?!&lt;/h2&gt;

&lt;p&gt;As you can tell from this post, I have started a blog. In both my research and my side projects, I encounter a wide variety of interesting ideas, issues, and bugs at the center of complex software systems. These topics can be anything from classloader subtleties at the heart of the JVM to specification ambiguities regarding the text encoding of strings stored in &lt;a href=&quot;http://dev.w3.org/html5/webstorage/#dom-localstorage&quot;&gt;LocalStorage&lt;/a&gt;. I plan to post approachable blog entries on interesting phenomena as I experience them firsthand.&lt;/p&gt;

&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;If you have any thoughts on the site design, feel free to leave a comment on this post. It is likely that I will be tweaking it occasionally as I find deficiencies.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://jvilk.com/blog/new-website-launch/&quot;&gt;New Website Launch&lt;/a&gt; was originally published by John Vilk at &lt;a href=&quot;https://jvilk.com&quot;&gt;John Vilk&lt;/a&gt; on December 12, 2014.&lt;/p&gt;</content>
</entry>

</feed>