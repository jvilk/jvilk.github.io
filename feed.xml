<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">John Vilk</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="https://jvilk.com/feed.xml" />
<link rel="alternate" type="text/html" href="https://jvilk.com" />
<updated>2017-01-30T12:47:27-05:00</updated>
<id>https://jvilk.com/</id>
<author>
  <name>John Vilk</name>
  <uri>https://jvilk.com/</uri>
  <email>jvilk@cs.umass.edu</email>
</author>


<entry>
  <title type="html"><![CDATA[Penn PL Club Homework: Making the Browser Reasonable for Sane Programmers]]></title>
  <link rel="alternate" type="text/html" href="https://jvilk.com/blog/penn-pl-club-homework/" />
  <id>https://jvilk.com/blog/penn-pl-club-homework</id>
  <published>2016-12-02T02:00:00-05:00</published>
  <updated>2016-12-02T02:00:00-05:00</updated>
  <author>
    <name>John Vilk</name>
    <uri>https://jvilk.com</uri>
    <email>jvilk@cs.umass.edu</email>
  </author>
  <content type="html">&lt;p&gt;&lt;em&gt;I am giving a talk at the &lt;a href=&quot;https://www.cis.upenn.edu/~plclub/&quot;&gt;University of Pennsylvania’s PL Club&lt;/a&gt; next week,
and was given the opportunity to assign a bit of homework to the audience.
This blog post contains the content of that homework.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before my talk, I want you to appreciate some of the difficulties involved in writing and debugging web apps.
If you have the time, I’d like you to run, tinker with, and think about some of the JavaScript code snippets below.
It will help you understand where my research is coming from.&lt;/p&gt;

&lt;h2 id=&quot;basic-javascript&quot;&gt;Basic JavaScript&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;For this section, I recommend you &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/shortcuts#accessing_devtools&quot;&gt;open your browser’s Developer Tools&lt;/a&gt;
to the Console, which is a REPL. All modern browsers have this feature. There, you can follow along with the examples.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;JavaScript is a high-level and dynamically typed programming language. When you write a web application, it must be written in or compile down to JavaScript.&lt;/p&gt;

&lt;p&gt;It has some odd behavior due to implicit conversions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// = &amp;quot;&amp;quot; (empty string)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// = the string &amp;quot;[object Object]&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// = the string &amp;quot;hello1&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// = NaN (not a number)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are two equality operators: &lt;code&gt;==&lt;/code&gt; performs implicit conversions, &lt;code&gt;===&lt;/code&gt; does not.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;3&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true; implicitly converts 3 to &amp;#39;3&amp;#39;&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;#39;3&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Objects are essentially maps from strings to properties, and you can define new properties at any time:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// number&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// array&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;someObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;someObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;someObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newProperty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Creates a new object property&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Objects can inherit properties from a prototype object:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someObjectPrototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setPrototypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someObjectPrototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Inherited field from prototype&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;someObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Creates field foo on someObject, distinct from prototype&amp;#39;s&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// foo field!&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;someObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;someObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 4&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;someObjectPrototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Arrays are objects, too:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// You can add properties to arrays, like objects.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newProperty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;quot;object&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;JavaScript has a loose definition of object types. To define a &lt;code&gt;Dog&lt;/code&gt; class, you define a function called &lt;code&gt;Dog&lt;/code&gt; and call it with &lt;code&gt;new&lt;/code&gt;. The result is an object that identifies as a &lt;code&gt;Dog&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// &amp;#39;this&amp;#39; points to the new Dog object you&amp;#39;re constructing.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animalType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;woof&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// All Dog objects will have the prototype Dog.prototype,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// and thus will have the function getSound().&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getSound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;charles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Charles&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;charles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;#39;woof&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;charles&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;charles&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can muck with &lt;code&gt;Dog&lt;/code&gt; later to confuse &lt;code&gt;instanceof&lt;/code&gt;, though:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Change Dog&amp;#39;s prototype object.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// charles&amp;#39;s prototype object is no longer&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// equal to Dog.prototype, so instanceof returns&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// false.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;charles&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is just a small taste of the many oddities of JavaScript. Due to its dynamism, it is very easy to introduce bugs into your code.&lt;/p&gt;

&lt;h2 id=&quot;event-driven-execution&quot;&gt;Event-driven Execution&lt;/h2&gt;

&lt;p&gt;In most traditional imperative programming languages, a program begins and ends in a single function (e.g., &lt;code&gt;main()&lt;/code&gt;). If you pause the application at a debugger breakpoint, you can see a stack trace leading back to this main entrypoint.&lt;/p&gt;

&lt;p&gt;JavaScript programs are not like this; instead, they are entirely &lt;em&gt;event-driven&lt;/em&gt;. When a JavaScript library loads on a webpage, it subscribes to events it is interested in via &lt;em&gt;event handlers&lt;/em&gt;. The browser triggers the relevant handler(s) when an event happens.&lt;/p&gt;

&lt;p&gt;Browser APIs expose functionality via events wherever possible: user input, network requests, timers, storage interfaces, etc.&lt;/p&gt;

&lt;p&gt;For example, the following code subscribes to clicks on a button, and lets the user know if they clicked the button after 5 seconds:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buttons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;button&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Assumption: There&amp;#39;s only one button on the page.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clicked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;clicked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Check if user clicked button after 5 seconds&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// via a timer event.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clicked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;You clicked the button! :D&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;You didn&amp;#39;t click the button. :(&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/images/pl-club-examples/button.html&quot; target=&quot;_blank&quot;&gt;&lt;i&gt;Run this code&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In JavaScript, &lt;em&gt;everything&lt;/em&gt; is event-driven. You cannot opt out.
At the same time, JavaScript execution blocks the UI from updating or receiving user input.
As a result, a long-running event can &lt;em&gt;crash the browser tab&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For example, the following code will crash your browser tab. You cannot click the button on the page. The browser will ask you if you want to kill the tab:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Wrap in timer so button displays before&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// we crash the tab.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Infinite loop. :D&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Try to click me. You can&amp;#39;t.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/images/pl-club-examples/crash.html&quot; target=&quot;_blank&quot;&gt;&lt;i&gt;Run this code (WARNING: crashes tab!)&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Web developers need to consciously avoid this problem. If an application needs to process a large amount of data (or do something else that is CPU intensive), it needs to space processing across multiple events to keep the webpage responsive.&lt;/p&gt;

&lt;h2 id=&quot;events-and-debugging&quot;&gt;Events and Debugging&lt;/h2&gt;

&lt;p&gt;Events have many implications for debugging. If you pause the application at a debugger breakpoint, you will see a stack trace that leads back to the start of the current event, but you won’t see the set of events that preceded it.&lt;/p&gt;

&lt;p&gt;In the following contrived example, the breakpoint in &lt;code&gt;bar&lt;/code&gt; will let you example a stack trace back to &lt;code&gt;foo&lt;/code&gt;, but will not say anything about &lt;code&gt;baz&lt;/code&gt; and its timer:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// If you have developer tools open, the debugger statement triggers a breakpoint.&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;debugger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Error occurred!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Run baz after 50 milliseconds&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Run foo after 5 seconds.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/images/pl-club-examples/events-debugging.html&quot; target=&quot;_blank&quot;&gt;&lt;i&gt;Try running &lt;code&gt;events-debugging.html&lt;/code&gt; in Chrome&lt;/i&gt;&lt;/a&gt;&lt;em&gt;, and &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/shortcuts#accessing_devtools&quot;&gt;open developer tools&lt;/a&gt; before the error alert occurs. It will open the debugger at the debugger statement.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Events make it difficult to determine the origin of a bug. In this example, the “bug” occurs because &lt;code&gt;baz&lt;/code&gt; sets &lt;code&gt;error&lt;/code&gt; to true. In an actual application, bugs may manifest many events in the future from the source of the bug.&lt;/p&gt;

&lt;p&gt;If the bug is hard to reproduce, a developer will spend much of their time reproducing the bug and testing hypotheses by setting breakpoints in various locations (or by liberally inserting &lt;code&gt;console.log&lt;/code&gt; statements in the code).&lt;/p&gt;

&lt;h2 id=&quot;race-conditions&quot;&gt;Race Conditions&lt;/h2&gt;

&lt;p&gt;JavaScript is single-threaded, but it is not without races. &lt;a href=&quot;https://dl.acm.org/citation.cfm?id=2254095&quot;&gt;Previous work has discussed some of these races in-depth.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are two primary sources of races in JavaScript: those caused by event scheduling, and those caused by browser components executing in parallel with JavaScript execution. The latter are more subtle, and are not discussed by existing work on web application race detection.&lt;/p&gt;

&lt;h3 id=&quot;event-scheduling&quot;&gt;Event Scheduling&lt;/h3&gt;

&lt;p&gt;If you have ever programmed with asynchronous I/O, then you may be aware that you cannot rely on the order in which multiple outstanding I/O operations complete. Similarly, you cannot rely on a JavaScript program to execute events in the same order for every execution.&lt;/p&gt;

&lt;p&gt;As an example, the following code will display the content of &lt;code&gt;data&lt;/code&gt; when the user clicks the button. However, &lt;code&gt;data&lt;/code&gt; isn’t initialized until the timer fires, so if the user clicks the button prematurely, the webpage will display the message “undefined”:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;button&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Welcome to this website!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/images/pl-club-examples/event-race.html&quot; target=&quot;_blank&quot;&gt;&lt;i&gt;Run this code&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above example is contrived to keep these code snippets short, but these types of races are a common source of bugs!&lt;/p&gt;

&lt;p&gt;Event scheduling-related races can be hard to find in more complicated web applications, and may only trigger in exceptional circumstances (e.g., a server is under heavy load, delaying requests).&lt;/p&gt;

&lt;h3 id=&quot;browser-components&quot;&gt;Browser Components&lt;/h3&gt;

&lt;p&gt;While JavaScript is single threaded, the web browser is &lt;em&gt;not&lt;/em&gt;. Browsers attempt to parallelize what they can, and can update state that is visible to JavaScript in &lt;em&gt;parallel&lt;/em&gt; with JavaScript execution. As a result, JavaScript code can race with other components in the browser.&lt;/p&gt;

&lt;p&gt;To make the problem concrete, suppose that a web page uses CSS to make a &lt;code&gt;div&lt;/code&gt; element periodically change its color. Further suppose that JavaScript code wishes to query its color:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;style &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@keyframes&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;color_change&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;#picker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color_change&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infinite&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alternate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;picker&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  Picker
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Checks if element e has a blue background.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isBlue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getComputedStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;backgroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rgb(0, 0, 255)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;picker&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isBlue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Observe that the animation continues when the program&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// is paused at this breakpoint!&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;debugger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isBlue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;/images/pl-club-examples/component-race.html&quot; target=&quot;_blank&quot;&gt;&lt;i&gt;Run this code&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One might assume that if &lt;code&gt;isBlue(div)&lt;/code&gt; returns true the first time that it would also return true the second time. However, this is not true. The &lt;code&gt;color_change&lt;/code&gt; animation occurs in parallel with JavaScript, so &lt;code&gt;backgroundColor&lt;/code&gt; changes while the script executes!&lt;/p&gt;

&lt;p&gt;In addition to animations, network events can happen in parallel with JavaScript execution. For example, the &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; properties on an image are 0 until the image loads, and an image can load while JavaScript executes.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;After reading through this document and trying some of the code samples, I hope you understand some of the challenges involved in writing and debugging web applications. Keep these challenges in mind during my talk.&lt;/p&gt;

&lt;p&gt;If any of the examples or explanations are unclear or if you have questions, &lt;a href=&quot;http://jvilk.com/contact/&quot;&gt;feel free to contact me&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://jvilk.com/blog/penn-pl-club-homework/&quot;&gt;Penn PL Club Homework: Making the Browser Reasonable for Sane Programmers&lt;/a&gt; was originally published by John Vilk at &lt;a href=&quot;https://jvilk.com&quot;&gt;John Vilk&lt;/a&gt; on December 02, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Java 8 Specification Bug: Default Interface Method Resolution]]></title>
  <link rel="alternate" type="text/html" href="https://jvilk.com/blog/java-8-specification-bug/" />
  <id>https://jvilk.com/blog/java-8-specification-bug</id>
  <published>2015-01-01T14:39:05-05:00</published>
  <updated>2015-01-01T14:39:05-05:00</updated>
  <author>
    <name>John Vilk</name>
    <uri>https://jvilk.com</uri>
    <email>jvilk@cs.umass.edu</email>
  </author>
  <content type="html">&lt;p&gt;In a previous blog post, I pointed out some &lt;a href=&quot;https://jvilk.com/blog/java-8-wtf-ambiguous-method-lookup/&quot;&gt;rather surprising behavior&lt;/a&gt; involving default interface methods, and cases in which method resolution is ambiguous as specified by the JVM specification. However, after consulting with commenters on the corresponding &lt;a href=&quot;http://www.reddit.com/r/programming/comments/2qula0/java_8_wtf_ambiguous_method_lookup/cn9th0y&quot;&gt;reddit&lt;/a&gt; post, it is possible that that method resolution is never ambiguous, and the JVM specification is &lt;em&gt;incorrect&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I’ve written an email to the &lt;a href=&quot;http://mail.openjdk.java.net/mailman/listinfo/jls-jvms-spec-comments&quot;&gt;JLS/JVM Specification Comments mailing list&lt;/a&gt;, which is a drop box for these sort of issues. I have no idea if they will get back to me or even discuss the issue, but I will post the full email here, with an addendum that describes how you can replicate the issue described in the email.&lt;/p&gt;

&lt;h2 id=&quot;email-to-the-jlsjvm-committee&quot;&gt;Email to the JLS/JVM Committee&lt;/h2&gt;

&lt;p&gt;Hello,&lt;/p&gt;

&lt;p&gt;I recently noticed a disagreement between the JLS and the JVMS for SE8 concerning the scenario where multiple direct superinterfaces of a class provide a default method for a method reference with the same name and signature. I believe this is a bug in the JVM specification, which specifies behavior that is not present in the reference implementation of the specification, and which differs from the behavior specified in the JLS.&lt;/p&gt;

&lt;p&gt;The JVM specification states the following should occur in the section on method resolution, &lt;a href=&quot;http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html#jvms-5.4.3.3&quot;&gt;§5.4.3.3&lt;/a&gt;, should there be no single maximally-specific default method (meaning, there are multiple) (emphasis mine):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Otherwise, if any superinterface of &lt;code&gt;C &lt;/code&gt;declares a method with the name and descriptor specified by the method reference that has neither its &lt;code&gt;ACC_PRIVATE&lt;/code&gt; flag nor its &lt;code&gt;ACC_STATIC&lt;/code&gt; flag set, &lt;strong&gt;one of these is arbitrarily chosen and method lookup succeeds&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, the JLS specification states the following in the section on Interface Method Declarations in the binary compatibility chapter, &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se8/html/jls-13.html#jls-13.5.6&quot;&gt;§13.5.6&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Adding a default method, or changing a method from abstract to default, does not break compatibility with pre-existing binaries, but may &lt;strong&gt;cause an &lt;code&gt;IncompatibleClassChangeError&lt;/code&gt; if a pre-existing binary attempts to invoke the method&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This section of the JLS contains a full example that exemplifies the specification bug I am describing in this email. In particular, the JLS states:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If &lt;code&gt;Cowboy&lt;/code&gt; is recompiled but not &lt;code&gt;CowboyArtist&lt;/code&gt;, then running the new binary with the existing binary for &lt;code&gt;CowboyArtist&lt;/code&gt; will link without error &lt;strong&gt;but cause an &lt;code&gt;IncompatibleClassChangeError&lt;/code&gt; when main attempts to invoke &lt;code&gt;draw()&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, this behavior description is in contrast to the JVM specification, which claims that one of the draw methods should be arbitrarily chosen and invoked.&lt;/p&gt;

&lt;p&gt;Using separate compilation on the example, I verified that the JVM does, in fact, throw an &lt;code&gt;IncompatibleClassChangeError&lt;/code&gt;, which disagrees with the behavior specified in the JVMS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ java example/CowboyArtist
Exception in thread &quot;main&quot; java.lang.IncompatibleClassChangeError: Conflicting default methods: example/Cowboy.draw example/Painter.draw
at example.CowboyArtist.draw(CowboyArtist.java)
at example.CowboyArtist.main(CowboyArtist.java:6)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since this behavior originates in the JVM, rather than in the bytecode produced from the Java Compiler, it should be included in the JVM specification.&lt;/p&gt;

&lt;p&gt;Thus, to fix this specification bug, I propose that the quoted section of the JVMS from the method resolution section be replaced with the following text:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Otherwise, if there are multiple maximally-specific superinterface methods of &lt;code&gt;C&lt;/code&gt; for the name and descriptor specified by the method reference, method resolution throws an &lt;code&gt;IncompatibleClassChangeError&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I believe the above text captures the behavior of the current reference implementation, and is in line with the JLS.&lt;/p&gt;

&lt;p&gt;Let me know if you have any questions, comments, or if you find a mistake in my reasoning above. It is very possible that I am missing a subtlety.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;John&lt;/p&gt;

&lt;h2 id=&quot;replicating-the-behavior&quot;&gt;Replicating the Behavior&lt;/h2&gt;

&lt;p&gt;If you want to try this at home, you’ll need to install the &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;Java 8 JDK&lt;/a&gt;. To provoke the behavior, we’ll need to use &lt;em&gt;separate compilation&lt;/em&gt;, since the Java Compiler will not compile code if it can prove at compile time that a class implements two interfaces that provide a default method with the same name and signature.&lt;/p&gt;

&lt;p&gt;In Java, &lt;em&gt;separate compilation&lt;/em&gt; means that multiple components of an application are compiled independently, and thus it is possible that the application will run with a version of a component that it was not compiled against. Normally, Java programs are run against the same code that they are compiled against. For example, if you compile your program against JUnit 4.10, you will most likely run your program against JUnit 4.10. However, it is possible to run the code against alternative versions of JUnit, such as JUnit 4.11, without issue.&lt;/p&gt;

&lt;p&gt;In any case, interesting problems can occur when your code is run against versions of classes that they were not compiled with. We abuse this flexibility to force a scenario where a class implements two interfaces that provide the same default method.&lt;/p&gt;

&lt;p&gt;First, create the following files:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// In example/Cowboy.java:&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cowboy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// In example/Painter.java:&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Painter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Here&amp;#39;s a picture...&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// In example/CowboyArtist.java:&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;example.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CowboyArtist&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cowboy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Painter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CowboyArtist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, compile a first version of the program, and verify that it runs properly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ javac example/CowboyArtist.java
$ java example.CowboyArtist
Here&#39;s a picture...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, modify &lt;code&gt;example/Cowboy.java&lt;/code&gt; so that it implements &lt;code&gt;draw&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cowboy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Bang!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Recompile &lt;code&gt;Cowboy&lt;/code&gt; alone, and try to run the program. Notice that it throws an &lt;code&gt;IncompatibleClassChangeError&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ javac example/Cowboy.java
$ java example.CowboyArtist
Exception in thread &quot;main&quot; java.lang.IncompatibleClassChangeError: Conflicting default methods: example/Cowboy.draw example/Painter.draw
at example.CowboyArtist.draw(CowboyArtist.java)
at example.CowboyArtist.main(CowboyArtist.java:6)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The crux of the issue that I describe in my email is that the JVM specification states that the JVM should arbitrarily choose to invoke either &lt;code&gt;example/Cowboy.draw&lt;/code&gt; or &lt;code&gt;example/Painter.draw&lt;/code&gt;, yet the Java Language Specification (JLS) states that the JVM should throw an &lt;code&gt;IncompatibleClassChangeError&lt;/code&gt;. HotSpot, the JVM in OpenJDK, is the reference implementation of the specification. Since HotSpot inplements the behavior in the JLS, it appears that the JVM specification is incorrect and should be updated to reflect the behavior in HotSpot.&lt;/p&gt;

&lt;h2 id=&quot;life-lessons-learned&quot;&gt;Life Lessons Learned&lt;/h2&gt;

&lt;p&gt;What I’ve learned from all of this is that blogging about all of the odd JVM corner cases I have to explore in creating &lt;a href=&quot;https://github.com/plasma-umass/doppio&quot;&gt;DoppioJVM&lt;/a&gt; can bring to light some of the complications of adding features to a well-entrenched language like Java as commenters step forward and share their expertise. I hope you all continue to correct me as I stumble through understanding the JVM specification, and wonder how certain sections came to be.&lt;/p&gt;

&lt;p&gt;With that said, I’m off to read more about &lt;code&gt;invokedynamic&lt;/code&gt;, which I’m currently fighting to get right in &lt;a href=&quot;https://github.com/plasma-umass/doppio&quot;&gt;DoppioJVM&lt;/a&gt;. :)&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://jvilk.com/blog/java-8-specification-bug/&quot;&gt;Java 8 Specification Bug: Default Interface Method Resolution&lt;/a&gt; was originally published by John Vilk at &lt;a href=&quot;https://jvilk.com&quot;&gt;John Vilk&lt;/a&gt; on January 01, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Java 8 WTF: Ambiguous Method Lookup]]></title>
  <link rel="alternate" type="text/html" href="https://jvilk.com/blog/java-8-wtf-ambiguous-method-lookup/" />
  <id>https://jvilk.com/blog/java-8-wtf-ambiguous-method-lookup</id>
  <published>2014-12-30T15:39:07-05:00</published>
  <updated>2014-12-30T15:39:07-05:00</updated>
  <author>
    <name>John Vilk</name>
    <uri>https://jvilk.com</uri>
    <email>jvilk@cs.umass.edu</email>
  </author>
  <content type="html">&lt;p&gt;I am currently working on adding Java 7/8 support to &lt;a href=&quot;https://github.com/plasma-umass/doppio&quot;&gt;DoppioJVM&lt;/a&gt;. In doing so, I am discovering some of the rather surprising JVM changes required to support Java 7+, and some interesting spec corner cases. In this blog post, I’ll reveal some &lt;em&gt;very surprising&lt;/em&gt; behavior involving a new Java 8 feature: Default interface methods!&lt;/p&gt;

&lt;h2 id=&quot;introduction-to-default-interface-methods&quot;&gt;Introduction to Default Interface Methods&lt;/h2&gt;

&lt;p&gt;Default interface methods let you include full method implementations in your interface definitions.
Classes that implement the interface do not need to explicitly implement these methods; they inherit the default implementation should the class not override it.
I believe that this is a positive change for Java.&lt;/p&gt;

&lt;p&gt;For example, the following is now valid Java code; it prints &lt;code&gt;Bark!&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;makeNoise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Prints &amp;quot;Bark!&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNoise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeNoise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getNoise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNoise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Bark!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using this functionality, Java 8 added a number of new methods to core Java interfaces &lt;em&gt;without&lt;/em&gt; breaking existing code by providing default implementations, such as &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/List.html#replaceAll-java.util.function.UnaryOperator-&quot;&gt;&lt;code&gt;java.util.List.replaceAll&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In addition to this functionality, interfaces can now contain static methods, but this change is irrelevant to this blog post.&lt;/p&gt;

&lt;h2 id=&quot;jvm-changes-required&quot;&gt;JVM Changes Required&lt;/h2&gt;

&lt;p&gt;You may be surprised to hear that the above functionality requires changes at the Java Virtual Machine (JVM) level.
Previously, &lt;em&gt;all&lt;/em&gt; methods invoked on an object could only be defined in the object’s class or super classes.
Thus, method lookup for &lt;code&gt;invokevirtual&lt;/code&gt; and &lt;code&gt;invokeinterface&lt;/code&gt; instructions proceeds as follows in Java &amp;lt;8:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Check the class of the object for a method with the given name and signature. If present, use that method.&lt;/li&gt;
  &lt;li&gt;Else, recursively check the class’s super types for a method with the given name and signature.&lt;/li&gt;
  &lt;li&gt;If no suitable method is found, throw a &lt;code&gt;NoSuchMethodError&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With default interface methods, the JVM now needs to search interfaces for method implementations.
Naturally, methods present in the object’s class or super classes are prioritized over the default implementation in an interface.
Thus, method lookup for &lt;code&gt;invokevirtual&lt;/code&gt; and &lt;code&gt;invokeinterface&lt;/code&gt; instructions in Java 8+ now works as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Check the class of the object for a method with the given name and signature. If present, use that method.&lt;/li&gt;
  &lt;li&gt;Else, recursively check the class’s super types for a method with the given name and signature.&lt;/li&gt;
  &lt;li&gt;Check the superinterfaces of the object for a method with the given name and signature.&lt;/li&gt;
  &lt;li&gt;If no suitable method is found, throw a &lt;code&gt;NoSuchMethodError&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This change appears to be relatively straightforward, but it introduces a subtle issue…&lt;/p&gt;

&lt;h2 id=&quot;multiple-inheritance-troubles&quot;&gt;Multiple Inheritance Troubles&lt;/h2&gt;

&lt;p&gt;The new lookup scheme introduces ambiguity when multiple interfaces provide default implementations of a method with the &lt;em&gt;same name and signature&lt;/em&gt;.
Should the class and its super classes fail to provide an implementation for the desired method, how should the JVM prioritize one interface’s default implementation over another?&lt;/p&gt;

&lt;p&gt;The Java compiler writers knew this would be an issue, and applied a band-aid to prevent certain programs from compiling:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JavaCHatesMe&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IFace1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IFace2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IFace1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IFace2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you try to compile the above program, &lt;code&gt;javac&lt;/code&gt; prints out the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ javac JavaCHatesMe.java
JavaCHatesMe.java:1: error: class JavaCHatesMe inherits unrelated defaults for foo() from types IFace1 and IFace2
public class JavaCHatesMe implements IFace1, IFace2 {
  ^
  1 error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(It should be noted that without default methods, and with a concrete implementation of &lt;code&gt;foo&lt;/code&gt; in &lt;code&gt;JavaCHatesMe&lt;/code&gt;, the program compiles with no issue.)&lt;/p&gt;

&lt;p&gt;However, this band-aid does not resolve the root problem! The following program compiles &lt;em&gt;just fine&lt;/em&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WTF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ISpeak&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ISpeak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ISpeak Speaking!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EmptySpeakImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EmptySpeakImplChild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ISpeak2&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISpeak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ISpeak2 Speaking!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmptySpeakImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISpeak2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmptySpeakImplChild&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmptySpeakImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISpeak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this example, &lt;code&gt;EmptySpeakImpl&lt;/code&gt; implements the interface &lt;code&gt;ISpeak2&lt;/code&gt;, and thus it clearly inherits &lt;code&gt;ISpeak2.speak()&lt;/code&gt;.
However, &lt;code&gt;EmptySpeakImplChild&lt;/code&gt; directly implements &lt;code&gt;ISpeak&lt;/code&gt; and implements &lt;code&gt;ISpeak2&lt;/code&gt; through its parent class, and thus its &lt;code&gt;speak()&lt;/code&gt; method will be from either of those two interfaces.&lt;/p&gt;

&lt;p&gt;Which &lt;code&gt;speak&lt;/code&gt; implementation do you think &lt;code&gt;EmptySpeakImplChild&lt;/code&gt; should inherit: &lt;code&gt;ISpeak.speak&lt;/code&gt;, or &lt;code&gt;ISpeak2.speak&lt;/code&gt;?
Common Java sense might indicate that the JVM should prioritize default interface methods specified in interfaces &lt;em&gt;directly implemented&lt;/em&gt; by child classes over those inherited from interfaces implemented by parent classes.
According to this scheme, &lt;code&gt;EmptySpeakImplChild&lt;/code&gt; should inherit &lt;code&gt;ISpeak.speak&lt;/code&gt;, as it explicitly implements that interface.&lt;/p&gt;

&lt;p&gt;However, Oracle’s JVM, HotSpot, disagrees with this logic, as the above program prints out the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ java WTF
ISpeak2 Speaking!
ISpeak2 Speaking!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;h2 id=&quot;taking-a-look-at-the-jvm-specification&quot;&gt;Taking a Look at the JVM Specification&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;EDIT: My interpretation below is incorrect, but I will leave it here for posterity. Please see the next section for an updated interpretation.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A quick glance at the JVM specification reveals why this behavior occurs: &lt;em&gt;method lookup in Java 8 is officially ambiguous&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html#jvms-5.4.3.3&quot;&gt;JVM Spec §5.4.3.3&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Otherwise, if any superinterface of C declares a method with the name and descriptor specified by the method reference that has neither its ACC_PRIVATE flag nor its ACC_STATIC flag set, &lt;strong&gt;one of these is arbitrarily chosen and method lookup succeeds&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By this definition of method resolution, both the proposed “common sense” behavior discussed above and HotSpot’s behavior are valid by the spec.
In fact, one could simply invoke &lt;code&gt;Math.random()&lt;/code&gt; in the process to decide among multiple choices.&lt;/p&gt;

&lt;p&gt;While I expect Java developers to rarely encounter this corner case, it is rather disturbing to encounter a specification that explicitly introduces ambiguity into a core process. Since Java 8 is the &lt;em&gt;first&lt;/em&gt; version of Java to include this behavior, this was an explicit decision on the part of the JVM standards committee rather than an after-the-fact discovery.&lt;/p&gt;

&lt;p&gt;It would have been preferable to specify &lt;em&gt;some&lt;/em&gt; order of preference, such as lexicographic ordering by name, order that interfaces are declared in the &lt;code&gt;class&lt;/code&gt; file, etc. Even if the specified order of preference doesn’t make sense to developers, it would allow alternative JVM implementations to have consistent behavior. I expect that programs that include this problematic behavior are doing so by accident, rather than conscious developer choice, and I would prefer that their program is portable across spec-compliant independent JVMs!&lt;/p&gt;

&lt;h2 id=&quot;edit-alternative-jvm-specification-interpretation&quot;&gt;Edit: Alternative JVM Specification Interpretation&lt;/h2&gt;

&lt;p&gt;User pron98 on reddit pointed out &lt;a href=&quot;http://www.reddit.com/r/programming/comments/2qula0/java_8_wtf_ambiguous_method_lookup/cn9th0y&quot;&gt;that my interpretation of the JVM specification&lt;/a&gt; may be incorrect, and that my example is not triggering the ambiguous behavior quoted above. In pron98’s interpretation, the term &lt;em&gt;superinterfaces&lt;/em&gt; in the specification refers solely to &lt;em&gt;direct superinterfaces&lt;/em&gt; – that is, interfaces directly implemented by a class C – rather than &lt;em&gt;indirect superinterfaces&lt;/em&gt;, which includes those that are inherited from C’s parent classes.
Under this interpretation, default method bodies inherited from interfaces implemented on parent classes will &lt;em&gt;always&lt;/em&gt; override default method bodies inherited from interfaces implemented on child classes.&lt;/p&gt;

&lt;p&gt;pron98 links to a &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.8&quot;&gt;section in the Java Language Specification&lt;/a&gt; which supports this interpretation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that it is possible for an inherited concrete method to prevent the inheritance of an abstract or default method. (Later we will assert that the concrete method overrides the abstract or default method “from C”.) Also, it is possible for one supertype method to prevent the inheritance of another supertype method if the former “already” overrides the latter - this is the same as the rule for interfaces (§9.4.1), and prevents conflicts in which multiple default methods are inherited and one implementation is clearly meant to supersede the other.]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At first, this behavior seemed counterintuitive to me, as it appears to invert the inheritance hierarchy (e.g. methods in parent classes taking precedence over methods in child classes). However, &lt;em&gt;default&lt;/em&gt; methods are used only when no other implementations exist, so if an implementation exists from a parent class, it makes some sense that the child class’s default method will not be used when an implementation is first found in a parent class.&lt;/p&gt;

&lt;p&gt;With all this said, method lookup &lt;strong&gt;is still ambiguous&lt;/strong&gt; in the case that a class implements two interfaces with default method bodies for the same method. &lt;code&gt;javac&lt;/code&gt; blocks all such programs from compiling, so Java programs are immune to the ambiguity, but non-Java languages that run on the JVM may still encounter the ambiguity.&lt;/p&gt;

&lt;h2 id=&quot;edit-2-a-little-more-complication&quot;&gt;Edit 2: A little more complication…&lt;/h2&gt;

&lt;p&gt;I missed one more subtlety in the specification. Buried in the method resolution section is the term &lt;em&gt;maximally-specific superinterface methods&lt;/em&gt; of &lt;code&gt;C&lt;/code&gt;. When no implementation for an interface method exists, and the JVM goes searching for a default implementation, the definition of this term defines a priority on &lt;em&gt;certain&lt;/em&gt; default interface methods.&lt;/p&gt;

&lt;p&gt;This term is applicable to my example application with &lt;code&gt;ISpeak&lt;/code&gt;. In particular, the default interface methods on subinterfaces are always prioritized over the default interface methods on their parents. Thus, since &lt;code&gt;EmptySpeakImplChild&lt;/code&gt;’s parent implements &lt;code&gt;ISpeak2&lt;/code&gt;, which is a subinterface of &lt;code&gt;ISpeak&lt;/code&gt;, its default methods will &lt;em&gt;always&lt;/em&gt; trump &lt;code&gt;ISpeak&lt;/code&gt;’s default methods. As a result, my example is even less ambiguous than I thought it was!&lt;/p&gt;

&lt;h2 id=&quot;next-post-invokedynamic&quot;&gt;Next Post: &lt;code&gt;invokedynamic&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;In my next post, I will dive into the murky world of &lt;code&gt;invokedynamic&lt;/code&gt;: the specification, the implementation in OpenJDK, and the resulting consequences for JVM implementors.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://jvilk.com/blog/java-8-wtf-ambiguous-method-lookup/&quot;&gt;Java 8 WTF: Ambiguous Method Lookup&lt;/a&gt; was originally published by John Vilk at &lt;a href=&quot;https://jvilk.com&quot;&gt;John Vilk&lt;/a&gt; on December 30, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[New Website Launch]]></title>
  <link rel="alternate" type="text/html" href="https://jvilk.com/blog/new-website-launch/" />
  <id>https://jvilk.com/blog/new-website-launch</id>
  <published>2014-12-12T19:18:45-05:00</published>
  <updated>2014-12-12T19:18:45-05:00</updated>
  <author>
    <name>John Vilk</name>
    <uri>https://jvilk.com</uri>
    <email>jvilk@cs.umass.edu</email>
  </author>
  <content type="html">&lt;p&gt;For the longest time, my personal website was a simple one-page setup. Handcrafted in HTML, frustrating to update, and oft-neglected… I had to make a change.&lt;/p&gt;

&lt;h2 id=&quot;enter-jekyll&quot;&gt;Enter Jekyll&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; is a fantastic &lt;a href=&quot;http://en.wikipedia.org/wiki/Markdown&quot;&gt;Markdown&lt;/a&gt;-driven static site generator. Once you have a template set up, you can simply write all of your content in Markdown and completely forget about the terrible world of CSS styling and positioning.&lt;/p&gt;

&lt;p&gt;I started with the excellent &lt;a href=&quot;http://mademistakes.com/so-simple/&quot;&gt;So Simple Theme&lt;/a&gt; by &lt;a href=&quot;https://mademistakes.com/about/&quot;&gt;Michael Rose&lt;/a&gt;, and tweaked it for my needs. The end result is a clean mobile-ready site that I can easily update.&lt;/p&gt;

&lt;h2 id=&quot;starting-a-blog&quot;&gt;Starting a blog?!&lt;/h2&gt;

&lt;p&gt;As you can tell from this post, I have started a blog. In both my research and my side projects, I encounter a wide variety of interesting ideas, issues, and bugs at the center of complex software systems. These topics can be anything from classloader subtleties at the heart of the JVM to specification ambiguities regarding the text encoding of strings stored in &lt;a href=&quot;http://dev.w3.org/html5/webstorage/#dom-localstorage&quot;&gt;LocalStorage&lt;/a&gt;. I plan to post approachable blog entries on interesting phenomena as I experience them firsthand.&lt;/p&gt;

&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;/h2&gt;

&lt;p&gt;If you have any thoughts on the site design, feel free to leave a comment on this post. It is likely that I will be tweaking it occasionally as I find deficiencies.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://jvilk.com/blog/new-website-launch/&quot;&gt;New Website Launch&lt;/a&gt; was originally published by John Vilk at &lt;a href=&quot;https://jvilk.com&quot;&gt;John Vilk&lt;/a&gt; on December 12, 2014.&lt;/p&gt;</content>
</entry>

</feed>